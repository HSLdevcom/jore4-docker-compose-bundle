# This is a generated file, all modifications will be overwritten!


# Map X-Environment HTTP header to $env_selector variable
map $http_x_environment $env_selector {
  e2e "-e2e";
  default "";
}

server {
    listen 80 default_server;
    location ~ /api/graphql(/|$)(.*) {
      # http://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # pass some headers from the client to help with redirects
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header X-Real-IP $remote_addr;

      # setting the resolver to docker DNS (127.0.0.11) and upstream as a variable
      # will prevent nginx from crashing if upstream does not exist
      resolver 127.0.0.11 valid=30s;
      set $upstream_hasura jore4-hasura$env_selector:8080;

      # containers api calls through / path, so using the second capture group from the regexp
      # to remove path prefixes
      proxy_pass http://$upstream_hasura/$2$is_args$args;
      proxy_redirect off;
    }

    location ~ /api/auth(/|$)(.*) {
      # http://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # pass some headers from the client to help with redirects
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header X-Real-IP $remote_addr;

      # setting the resolver to docker DNS (127.0.0.11) and upstream as a variable
      # will prevent nginx from crashing if upstream does not exist
      resolver 127.0.0.11 valid=30s;
      set $upstream_auth jore4-auth:8080;

      # containers api calls through / path, so using the second capture group from the regexp
      # to remove path prefixes
      proxy_pass http://$upstream_auth/$2$is_args$args;
      proxy_redirect off;
    }

    location ~ /api/mbtiles(/|$)(.*) {
      # http://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # pass some headers from the client to help with redirects
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header X-Real-IP $remote_addr;

      # setting the resolver to docker DNS (127.0.0.11) and upstream as a variable
      # will prevent nginx from crashing if upstream does not exist
      resolver 127.0.0.11 valid=30s;
      set $upstream_mbtiles jore4-mbtiles:8000;

      # containers api calls through / path, so using the second capture group from the regexp
      # to remove path prefixes
      proxy_pass http://$upstream_mbtiles/$2$is_args$args;
      proxy_redirect off;
    }

    location ~ /api/mapmatching(/|$)(.*) {
      # http://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # pass some headers from the client to help with redirects
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header X-Real-IP $remote_addr;

      # setting the resolver to docker DNS (127.0.0.11) and upstream as a variable
      # will prevent nginx from crashing if upstream does not exist
      resolver 127.0.0.11 valid=30s;
      set $upstream_mapmatching jore4-mapmatching:8080;

      # containers api calls through / path, so using the second capture group from the regexp
      # to remove path prefixes
      proxy_pass http://$upstream_mapmatching/$2$is_args$args;
      proxy_redirect off;
    }

    location ~ /api/hastus(/|$)(.*) {
      # http://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # pass some headers from the client to help with redirects
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header X-Real-IP $remote_addr;

      # setting the resolver to docker DNS (127.0.0.11) and upstream as a variable
      # will prevent nginx from crashing if upstream does not exist
      resolver 127.0.0.11 valid=30s;
      set $upstream_hastus jore4-hastus:8080;

      # containers api calls through / path, so using the second capture group from the regexp
      # to remove path prefixes
      proxy_pass http://$upstream_hastus/$2$is_args$args;
      proxy_redirect off;
    }

    location ~ /()(.*) {
      # http://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # pass some headers from the client to help with redirects
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header X-Real-IP $remote_addr;

      # setting the resolver to docker DNS (127.0.0.11) and upstream as a variable
      # will prevent nginx from crashing if upstream does not exist
      resolver 127.0.0.11 valid=30s;
      set $upstream_ui jore4-ui:80;

      # containers api calls through / path, so using the second capture group from the regexp
      # to remove path prefixes
      proxy_pass http://$upstream_ui/$2$is_args$args;
      proxy_redirect off;
    }

}
